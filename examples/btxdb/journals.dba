;; journals.dba  -- BibTeX Journal strings
;; journals.dba,v 1.3 1993/01/11 21:44:06 ohl Exp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setf db-use-internal-rep-p                   t
      (database-print-name          database) "BibTeX Journal Name Database")
(database-set-fieldnames-to-list database '(symbol full abbrev))
(dbf-set-summary-format
   "[\\symbol,string-or-nil,width=8] \\full,string-or-nil (aka \\abbrev)")

(defun btxdb-update-journals ()
  ""
  (interactive)
  (let ((fn (database-file dbc-database)))
    (mapcar (lambda (suffix)
              (save-excursion
                (db-report (concat "journals-" suffix ".rep"))
                (goto-char (point-min))
                (insert "# journals-" suffix ".bib -- DO NOT EDIT!\n"
                        "# created from " fn "\n"
                        "# on " (current-time-string)
                        ", edit this file instead.\n")
                (goto-char (point-max))
                (insert "# The End.\n")
                (write-file (concat "journals-" suffix ".bib"))))
	    '("full" "abbrev"))
    ;; EDB doesn't seem to be fully reentrant.  Using EDB to read the
    ;; journals file while initializing another database loses.  As a
    ;; kludge, we provide a separate file.
    (save-excursion
      (get-buffer-create "*Database Report*")
      (setq buffer-read-only nil)
      (erase-buffer)
      (emacs-lisp-mode)
      (insert ";;; journals.el -- DO NOT EDIT!\n"
	      ";;; created from " fn "\n"
	      ";;; on " (current-time-string)
	      ", edit this file instead.\n")
      (insert "(setq btxdb:journals '(\n")
      (db-maprecords (lambda (r)
                       (insert (format "  %s\n" r))))
      (insert "))\n;;; The End.\n")
      (write-file "journals.el"))))

;; Local Variables:
;; mode:emacs-lisp
;; End:
