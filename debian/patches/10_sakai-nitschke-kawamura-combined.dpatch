#! /bin/sh /usr/share/dpatch/dpatch-run
## sakai-nitschke-kawamura-combined.diff.dpatch by Jari Aalto <jari.aalto@cante.net>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Combined patch

@DPATCH@

diff --git a/db-format.el b/db-format.el
index df180e3..082eaa2 100644
--- a/db-format.el
+++ b/db-format.el
@@ -65,7 +65,8 @@ This variable is examined only when a data display buffer is being set up.")
 If the text already has a face, that takes precedence.
 This variable is examined only when a data display buffer is being set up.")
 
-(deflocalvar dbf-selected-field-face
+;;; added `nil' to this (unused) variable decln to correct it
+(deflocalvar dbf-selected-field-face nil
   "If non-nil, the face for the field being currently edited.")
 
 
@@ -2445,8 +2446,10 @@ fieldnumbers strictly less than it will be displayed."
     (dbc-update-database-modified-p)
     (buffer-disable-undo (current-buffer))
     (if db-fontification
-	(map-extents (function (lambda (x y) (delete-extent x)))
-		     (current-buffer) (point-min) (point-max) nil))
+	(when (save-match-data 
+		(string-match "\\(Lucid\\|Xemacs\\)" (emacs-version)))
+	  (map-extents (function (lambda (x y) (delete-extent x)))
+		       (current-buffer) (point-min) (point-max) nil)))
     (erase-buffer)
     (while (< field-index dbf-displayspecs-length)
       ;; (db-debug-message "display-record:  field %s" field-index)
@@ -2631,21 +2634,24 @@ fieldnumbers strictly less than it will be displayed."
 
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
-;;; Data display buffer fontification
-;;;
+;;; Data display buffer fontification (GNU Emacs version)
+;;; (See original Lucid versions below)
+
+(defun db-inter-field-face-setup ()
+  "Initialise the properties of the variable `db-inter-field-face'.
+Really only a trivial example."
+  (interactive)
+  (copy-face 'default 'db-inter-field-face)
+  (set-face-foreground 'db-inter-field-face "magenta"))
 
 (if db-fontification
     ;; Allowing user to set his own preferences in ~/.Xdefaults
     (progn
-      (or (find-face 'db-inter-field-face)
+      (or (internal-find-face 'db-inter-field-face)
  	  (make-face 'db-inter-field-face))
       (or (face-differs-from-default-p 'db-inter-field-face)
 	  (copy-face 'bold 'db-inter-field-face))))
 
-;; This is a bit of a hack.  Leaving out the white space stops the field
-;; text from occassionally taking on the 'db-inter-field-face'.  If the
-;; user did not use white space the this would evidently not work.
-
 (defun db-fontify (start end)
   "Fontify the region between START and END.  Leave out the leading and
   trailing white space."
@@ -2657,9 +2663,44 @@ fieldnumbers strictly less than it will be displayed."
       (goto-char end)
       (skip-chars-backward " \t\n")
       (if (< ext-start (point))
-	  (set-extent-face
-	   (make-extent ext-start (point))
-	   'db-inter-field-face)))))
+	  (let (overlay-extent)
+	    (setq overlay-extent (make-overlay ext-start (point)))
+	    (put-text-property (overlay-start overlay-extent)
+			       (overlay-end overlay-extent)
+			       'face 'db-inter-field-face
+			       (overlay-buffer overlay-extent))
+	    (overlay-put overlay-extent 'face 'db-inter-field-face))))))
+
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+;;;; Data display buffer fontification (Lucid emacs only)
+;;;;
+
+;(if db-fontification
+;    ;; Allowing user to set his own preferences in ~/.Xdefaults
+;    (progn
+;      (or (find-face 'db-inter-field-face)
+; 	  (make-face 'db-inter-field-face))
+;      (or (face-differs-from-default-p 'db-inter-field-face)
+;	  (copy-face 'bold 'db-inter-field-face))))
+
+;;; This is a bit of a hack.  Leaving out the white space stops the field
+;;; text from occassionally taking on the 'db-inter-field-face'.  If the
+;;; user did not use white space the this would evidently not work.
+
+;(defun db-fontify (start end)
+;  "Fontify the region between START and END.  Leave out the leading and
+;  trailing white space."
+;  (let (ext-start)
+;    (save-excursion
+;      (goto-char start)
+;      (skip-chars-forward " \t\n")
+;      (setq ext-start (point))
+;      (goto-char end)
+;      (skip-chars-backward " \t\n")
+;      (if (< ext-start (point))
+;	  (set-extent-face
+;	   (make-extent ext-start (point))
+;	   'db-inter-field-face)))))
 
 ;;; Old version
 ;; (defun db-fontify (start end)
diff --git a/db-interfa.el b/db-interfa.el
index a2878d3..7cdf844 100644
--- a/db-interfa.el
+++ b/db-interfa.el
@@ -434,6 +434,7 @@ Don't set this variable directly; use command `db-toggle-auto-edit-mode'.")
       (define-key database-edit-mode-map [mouse1] 'db-lucid-mouse-jump-to-point)
       (define-key database-edit-mode-map [mouse3] 'database-edit-mode-menu)
 
+      (load "db-summary")
       (define-key database-summary-mode-map [mouse1] 'db-lucid-mouse-jump-to-point)
 
       (defun db-lucid-mouse-jump-to-point (e)
diff --git a/db-time.el b/db-time.el
index 4106344..7a32344 100644
--- a/db-time.el
+++ b/db-time.el
@@ -54,8 +54,10 @@
        (let ((day (date-day date))) (or (not day) (zerop day)))))
 
 (defsubst date-year-short (date)
-  "Extract the year and return it modulo 1900."
-  (% (date-year date) 1900))
+  "Extract the year and return it as a two digit value."
+  (let ((yy (date-year date)))
+    (cond ((> yy 1999) (% yy 2000))
+          (t (% yy 1900)))))
 
 (defun date-year-long (date)
   "Extract the year as a four digit value."
@@ -141,7 +143,7 @@ The Gregorian date Sunday, December 31, 1 BC is imaginary."
 ;;; Months
 
 (defconst monthlength-array
-  [0 31 28 31 30 31 30 31 31 30 31 30 31])
+  [0 31 29 31 30 31 30 31 31 30 31 30 31])
 
 ;; I could add a fancy leap year check.
 (defun date-month-day-compatible (date)
@@ -805,7 +807,7 @@ If DATE is nil, return the empty string."
 ;;; Display types:   time, time-12, time-24, time-12-hhmm, time-24-hhmm,
 ;;;		     and time-hhmm.
 ;;; Field Types:     time, time-12, time-24, and time-arb-storage
-;;; Functions: 	     parse-time-string, format-time-12, format-time-24
+;;; Functions: 	     db-parse-time-string, format-time-12, format-time-24
 ;;;		     time->storage-string, storage-string->time,
 ;;;		     time-order, time-merge, time-match-function,
 ;;;		     time-default-constraint
@@ -842,7 +844,7 @@ If DATE is nil, return the empty string."
     (error "Invalid time value.")))
 
 
-;; parse-time-string
+;; db-parse-time-string
 ;;
 ;; State-driven time parser; I converted this from my Perl time parser.
 ;; Alan K. Stebbens, UCSB <aks@hub.ucsb.edu>
@@ -851,11 +853,11 @@ If DATE is nil, return the empty string."
   [ "\\([0-9]?[0-9]\\)\\(:\\| ?[ap]m\\)"
     "\\([0-5][0-9]\\)\\(:\\| ?[ap]m\\|\\Sw\\|$\\)"
     "\\([0-5][0-9]\\)\\( *[ap]m\\|\\Sw\\|$\\)" ]
-  "An array of regexps used by parse-time-string, indexed by the
+  "An array of regexps used by db-parse-time-string, indexed by the
 current parse state to obtain the appropriate regexp.")
 
 
-(defun parse-time-string (time-string)
+(defun db-parse-time-string (time-string)
   "Parse the first occurrence of hh:mm:ss in TIME-STRING; return a time object.
 If \":ss\" is hidden in TIME-STRING, the seconds default to zero.
 If TIME-STRING contains only whitespace, return an empty time object.
@@ -888,11 +890,11 @@ If TIME-STRING is nil, use the result of `parse-time-default-function' instead."
 
 (defvar parse-time-default 'empty
   "One of the symbols 'empty or 'current-time, specifying what time string
-`parse-time-default-function' should return, and `parse-time-string' should
+`parse-time-default-function' should return, and `db-parse-time-string' should
 use when passed a nil argument.")
 
 (defun parse-time-default-function ()
-  "Return a default value for `parse-time-string' to use if its input is nil."
+  "Return a default value for `db-parse-time-string' to use if its input is nil."
   (cond ((eq parse-time-default 'empty)
 	 "")
 	((or (eq parse-time-default 'current-time)
@@ -924,7 +926,7 @@ use when passed a nil argument.")
      (while times
        (message "In = \"%s\" Out = \"%s\" (CR for next)"
 		(car times)
-		(parse-time-string (car times)))
+		(db-parse-time-string (car times)))
        (read-char)
        (setq times (cdr times)))))
 
@@ -989,7 +991,7 @@ of the name \"format-time-TYPE\"."
 (let ((ds (make-displayspec)))
   (displayspec-set-indent ds nil)
   (displayspec-set-actual->display ds (function format-time-12))
-  (displayspec-set-display->actual ds (function parse-time-string))
+  (displayspec-set-display->actual ds (function db-parse-time-string))
   (define-displaytype-from-displayspec 'time ds))
 
 (def-time-disptype "12")		;am/pm time
@@ -1019,7 +1021,7 @@ of the name \"format-time-TYPE\"."
   (define-recordfieldtype-from-recordfieldspec 'time-24 rs))
 
 (let ((rs (copy-recordfieldspec (recordfieldtype->recordfieldspec 'time))))
-  (recordfieldspec-set-stored->actual rs (function parse-time-string))
+  (recordfieldspec-set-stored->actual rs (function db-parse-time-string))
   (define-recordfieldtype-from-recordfieldspec 'time-arb-storage rs))
 
 ;; time-order
diff --git a/db-util.el b/db-util.el
index bd91800..87ae689 100644
--- a/db-util.el
+++ b/db-util.el
@@ -557,7 +557,7 @@ This is more useful than `in-buffer' for window manipulation, as by `scroll-up'.
 	    symbol (car pair)
 	    blv (cdr blv))
       ;; nil and 0 can be bogus local variables; never copy buffer-undo-list
-      (if (not (memq symbol '(0 nil buffer-undo-list)))
+      (if (not (memq symbol '(0 nil buffer-undo-list enable-multibyte-characters)))
 	  (progn
 	    (if (not (symbolp symbol))
 		(error "\"%s\" should be a symbol with value \"%s\""
@@ -688,8 +688,8 @@ but simply a set of forms."
 
 ;; Originally by Joe Wells <jbw@cs.bu.edu>
 (defun db-best-fit-message (text &optional buffer)
-  "Show TEXT in echo area if it fits or in optional BUFFER (default *Message*)."
-  (or buffer (setq buffer "*Message*"))
+  "Show TEXT in echo area if it fits or in optional BUFFER (default *Messages*)."
+  (or buffer (setq buffer "*Messages*"))
   (save-excursion
     (set-buffer (get-buffer-create " temp printing buffer"))
     (erase-buffer)
